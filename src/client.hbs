import * as pb from './{{protoFilename}}';
import { createProtobufRPCImpl, createJSONRPCImpl, JSONRPCImpl } from 'ts-proto-twirp';

interface Create{{service}}ClientParams {
  /**
   * The host portion of the URL to use.
   */
  host: string;

  /**
   * The port used to call the service.
   */
  port: number;
}

export function create{{service}}ProtobufClient(
  params: Create{{service}}ClientParams
): pb.{{service}} {
  const rpcImpl = createProtobufRPCImpl({
    host: params.host,
    port: params.port
  });

  return new pb.{{service}}ClientImpl(rpcImpl)
}

export function create{{service}}JSONClient(
  params: Create{{service}}ClientParams
): pb.{{service}} {
  const rpcImpl = createJSONRPCImpl({
    host: params.host,
    port: params.port,
    path: '/twirp/{{namespace}}.{{service}}/',
  });

  return new {{service}}JSONClient(rpcImpl);
}

export class {{service}}JSONClient implements pb.{{service}} {
  private rpcImpl: JSONRPCImpl;

  constructor(rpcImpl: JSONRPCImpl) {
    this.rpcImpl = rpcImpl;
  }
  {{#each methods as |method|}}

  public async {{method.name}}(request: pb.{{method.requestType}}): Promise<pb.{{method.responseType}}> {
    const requestMessage = pb.{{method.requestType}}.toJSON(request);
    const response = await this.rpcImpl(requestMessage, '{{method.name}}');

    return pb.{{method.responseType}}.fromJSON(response);
  }
  {{/each}}
}
